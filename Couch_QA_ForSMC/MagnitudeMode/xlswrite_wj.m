function [success,theMessage]=xlswrite(file,data,sheet,range)
% XLSWRITE Write to Microsoft Excel spreadsheet file.
%   XLSWRITE(FILE,ARRAY) writes ARRAY to the first worksheet in the Excel
%   file named FILE, starting at cell A1.
%
%   XLSWRITE(FILE,ARRAY,SHEET) writes to the specified worksheet.
%
%   XLSWRITE(FILE,ARRAY,RANGE) writes to the rectangular region
%   specified by RANGE in the first worksheet of the file. Specify RANGE
%   using the syntax 'C1:C2', where C1 and C2 are opposing corners of the
%   region.
%
%   XLSWRITE(FILE,ARRAY,SHEET,RANGE) writes to the specified SHEET and
%   RANGE.
%
%   STATUS = XLSWRITE(FILE,ARRAY,SHEET,RANGE) returns the completion
%   status of the write operation: TRUE (logical 1) for success, FALSE
%   (logical 0) for failure.  Inputs SHEET and RANGE are optional.
%
%   [STATUS,MESSAGE] = XLSWRITE(FILE,ARRAY,SHEET,RANGE) returns any warning
%   or error messages generated by the write operation in structure
%   MESSAGE. The structure contains two fields: 'message' and 'identifier'.
%   Inputs SHEET and RANGE are optional.
%
%   Input Arguments:
%
%   FILE    String that specifies the file to write. If the file does not
%           exist, XLSWRITE creates a file, determining the format based on
%           the specified extension. To create a file compatible with Excel
%           97-2003 software, specify an extension of '.xls'. To create
%           files in Excel 2007 or later formats, specify an extension of
%           '.xlsx', '.xlsb', or '.xlsm'. If you do not specify an 
%           extension, XLSWRITE applies '.xls'.
%   ARRAY   Two-dimensional numeric or character array or, if each cell
%           contains a single element, a cell array.
%   SHEET   Worksheet to write. One of the following:
%           * String that contains the worksheet name.
%           * Positive, integer-valued scalar indicating the worksheet
%             index.
%           If SHEET does not exist, XLSWRITE adds a new sheet at the end
%           of the worksheet collection. If SHEET is an index larger than
%           the number of worksheets, XLSWRITE appends new sheets until the
%           number of worksheets in the workbook equals SHEET.
%   RANGE   String that specifies a rectangular portion of the worksheet to
%           read. Not case sensitive. Use Excel A1 reference style.
%           * If you specify a SHEET, RANGE can either fit the size of
%             ARRAY or specify only the first cell (such as 'D2').
%           * If you do not specify a SHEET, RANGE must include both 
%             corners and a colon character (:), even for a single cell
%             (such as 'D2:D2').
%           * If RANGE is larger than the size of ARRAY, Excel fills the
%             remainder of the region with #N/A. If RANGE is smaller than
%             the size of ARRAY, XLSWRITE writes only the subset that fits
%             into RANGE to the file.
%
%   Notes:
%
%   * If your system does not have Excel for Windows, or if the COM server
%     (part of the typical installation of Excel) is unavailable, XLSWRITE:
%        * Writes ARRAY to a text file in comma-separated value (CSV) format.
%        * Ignores SHEET and RANGE arguments.
%        * Generates an error when ARRAY is a cell array.
%
%   * Excel converts Inf values to 65535. XLSWRITE converts NaN values to
%     empty cells.
%
%   Examples:
%
%   % Write a 7-element vector to testdata.xls:
%   xlswrite('testdata.xls', [12.7, 5.02, -98, 63.9, 0, -.2, 56])
%
%   % Write mixed text and numeric data to testdata2.xls
%   % starting at cell E1 of Sheet1:
%   d = {'Time','Temperature'; 12,98; 13,99; 14,97};
%   xlswrite('testdata2.xls', d, 1, 'E1')
%
% See also XLSREAD, XLSFINFO, DLMWRITE.
%

%   Copyright 1984-2012 The MathWorks, Inc.
%   $Revision: 1.1.6.28 $  $Date: 2012/09/05 07:24:50 $
%==============================================================================
% Set default values.
Sheet1 = 1;

if nargin < 3
    sheet = Sheet1;
    range = '';
elseif nargin < 4
    range = '';
end

if nargout > 0
    success = true;
    theMessage = struct('message',{''},'identifier',{''});
end

% Handle input.
try
    % handle requested Excel workbook filename.
    if ~isempty(file)
        if ~ischar(file)
            error(message('MATLAB:xlswrite:InputClassFilename'));
        end
        % check for wildcards in filename
        if any(strfind(file, '*'))
            error(message('MATLAB:xlswrite:FileName'));
        end
        [Directory,file,ext]=fileparts(file);
        if isempty(ext) % add default Excel extension;
            ext = '.xls';
        end
        file = abspath(fullfile(Directory,[file ext]));
        [a1, a2] = fileattrib(file);
        if a1 && ~(a2.UserWrite == 1)
            error(message('MATLAB:xlswrite:FileReadOnly'));
        end
    else % get workbook filename.
        error(message('MATLAB:xlswrite:EmptyFileName'));
    end

    % Check for empty input data
    if isempty(data)
        error(message('MATLAB:xlswrite:EmptyInput'));
    end

    % Check for N-D array input data
    if ndims(data)>2 %#ok<ISMAT>
        error(message('MATLAB:xlswrite:InputDimension'));
    end

    % Check class of input data
    if ~(iscell(data) || isnumeric(data) || ischar(data)) && ~islogical(data)
        error(message('MATLAB:xlswrite:InputClass'));
    end


    % convert input to cell array of data.
     if iscell(data)
        A=data;
     else
         A=num2cell(data);
     end

    if nargin > 2
        % Verify class of sheet parameter.
        if ~(ischar(sheet) || (isnumeric(sheet) && sheet > 0))
            error(message('MATLAB:xlswrite:InputClassSheetArg'));
        end
        if isempty(sheet)
            sheet = Sheet1;
        end
        % parse REGION into sheet and range.
        % Parse sheet and range strings.
        if ischar(sheet) && ~isempty(strfind(sheet,':'))
            range = sheet; % only range was specified.
            sheet = Sheet1;% Use default sheet.
        elseif ~ischar(range)
            error(message('MATLAB:xlswrite:InputClassRangeArg'));
        end
    end

catch exception
    narginchk(2,4);
    success = false;
    theMessage = exceptionHandler(nargout, exception);
    return;
end
%------------------------------------------------------------------------------
% Attempt to start Excel as ActiveX server.
try
    Excel = actxserver('Excel.Application');

catch exception %#ok<NASGU>
    warning(message('MATLAB:xlswrite:NoCOMServer'));
    if nargout > 0
        [theMessage.message,theMessage.identifier] = lastwarn;
    end
    % write data as CSV file, that is, comma delimited.
    file = regexprep(file,'(\.xls[^.]*+)$','.csv'); 
    try
        dlmwrite(file,data,','); % write data.
    catch exception
        exceptionNew = MException('MATLAB:xlswrite:dlmwrite','%s', getString(message('MATLAB:xlswrite:dlmwrite')));
        exceptionNew = exceptionNew.addCause(exception);
        if nargout == 0
            % Throw error.
            throw(exceptionNew);
        else
            success = false;
            theMessage.message = exceptionNew.getReport;
            theMessage.identifier = exceptionNew.identifier;
        end
    end
    return;
end
%------------------------------------------------------------------------------
try
    % Construct range string
    if isempty(strfind(range,':'))
        % Range was partly specified or not at all. Calculate range.
        [m,n] = size(A);
        range = calcrange(range,m,n);
    end
catch exception
    success = false;
    theMessage = exceptionHandler(nargout, exception);
    return;
end

%------------------------------------------------------------------------------
try
    bCreated = ~exist(file,'file');
    ExecuteWrite;
catch exception
    if (bCreated && exist(file, 'file') == 2)
        delete(file);
    end
    success = false;
    theMessage = exceptionHandler(nargout, exception);
end        
    function ExecuteWrite
        cleanUp = onCleanup(@()xlsCleanup(Excel, file));
        if bCreated
            % Create new workbook.  
            %This is in place because in the presence of a Google Desktop
            %Search installation, calling Add, and then SaveAs after adding data,
            %to create a new Excel file, will leave an Excel process hanging.  
            %This workaround prevents it from happening, by creating a blank file,
            %and saving it.  It can then be opened with Open.
            ExcelWorkbook = Excel.workbooks.Add;
            switch ext
                case '.xls' %xlExcel8 or xlWorkbookNormal
                   xlFormat = -4143;
                case '.xlsb' %xlExcel12
                   xlFormat = 50;
                case '.xlsx' %xlOpenXMLWorkbook
                   xlFormat = 51;
                case '.xlsm' %xlOpenXMLWorkbookMacroEnabled 
                   xlFormat = 52;
                otherwise
                   xlFormat = -4143;
            end
            ExcelWorkbook.SaveAs(file, xlFormat);
            ExcelWorkbook.Close(false);
        end

        %Open file
        readOnly = false;
        [~, ExcelWorkbook] = openExcelWorkbook(Excel, file, readOnly);
        if ExcelWorkbook.ReadOnly ~= 0
            %This means the file is probably open in another process.
            error(message('MATLAB:xlswrite:LockedFile', file));
        end
        try % select region.
            % Activate indicated worksheet.
            theMessage = activate_sheet(Excel,sheet);

            % Select range in worksheet.
            Select(Range(Excel,sprintf('%s',range)));

        catch exceptionInner % Throw data range error.
            throw(MException('MATLAB:xlswrite:SelectDataRange','%s', getString(message('MATLAB:xlswrite:SelectDataRangeException', exceptionInner.message)))); 
        end

        % Export data to selected region.
        set(Excel.selection,'Value',A);
        ExcelWorkbook.Save      
    end
end
%--------------------------------------------------------------------------
function theMessage = activate_sheet(Excel,Sheet)
% Activate specified worksheet in workbook.

% Initialize worksheet object
WorkSheets = Excel.sheets;
theMessage = struct('message',{''},'identifier',{''});

% Get name of specified worksheet from workbook
try
    TargetSheet = get(WorkSheets,'item',Sheet);
catch exception  %#ok<NASGU>
    % Worksheet does not exist. Add worksheet.
    TargetSheet = addsheet(WorkSheets,Sheet);
    warning(message('MATLAB:xlswrite:AddSheet'));
    if nargout > 0
        [theMessage.message,theMessage.identifier] = lastwarn;
    end
end

% activate worksheet
Activate(TargetSheet);
end
%------------------------------------------------------------------------------
function newsheet = addsheet(WorkSheets,Sheet)
% Add new worksheet, Sheet into worksheet collection, WorkSheets.

if isnumeric(Sheet)
    % iteratively add worksheet by index until number of sheets == Sheet.
    while WorkSheets.Count < Sheet
        % find last sheet in worksheet collection
        lastsheet = WorkSheets.Item(WorkSheets.Count);
        newsheet = WorkSheets.Add([],lastsheet);
    end
else
    % add worksheet by name.
    % find last sheet in worksheet collection
    lastsheet = WorkSheets.Item(WorkSheets.Count);
    newsheet = WorkSheets.Add([],lastsheet);
end
% If Sheet is a string, rename new sheet to this string.
if ischar(Sheet)
    set(newsheet,'Name',Sheet);
end
end
%------------------------------------------------------------------------------
function [absolutepath]=abspath(partialpath)

% parse partial path into path parts
[pathname, filename, ext] = fileparts(partialpath);
% no path qualification is present in partial path; assume parent is pwd, except
% when path string starts with '~' or is identical to '~'.

if isempty(pathname) && partialpath(1) ~= '~'
    folder_directory = uigetdir;
    Directory = folder_directory
elseif isempty(regexp(partialpath,'^(.:|\\\\|/|~)','once'));
    % path did not start with any of drive name, UNC path or '~'.
    folder_directory = uigetdir;
    Directory = [folder_directory,filesep,pathname];
else
    % path content present in partial path; assume relative to current directory,
    % or absolute.
    folder_directory = uigetdir;
    Directory = [folder_directory,filesep,pathname];
end

% construct absolute filename
absolutepath = fullfile(Directory,[filename,ext]);
end
%------------------------------------------------------------------------------
function range = calcrange(range,m,n)
% Calculate full target range, in Excel A1 notation, to include array of size
% m x n

range = upper(range);
cols = isletter(range);
rows = ~cols;
% Construct first row.
if ~any(rows)
    firstrow = 1; % Default row.
else
    firstrow = str2double(range(rows)); % from range input.
end
% Construct first column.
if ~any(cols)
    firstcol = 'A'; % Default column.
else
    firstcol = range(cols); % from range input.
end
try
    lastrow = num2str(firstrow+m-1);   % Construct last row as a string.
    firstrow = num2str(firstrow);      % Convert first row to string image.
    lastcol = dec2base27(base27dec(firstcol)+n-1); % Construct last column.

    range = [firstcol firstrow ':' lastcol lastrow]; % Final range string.
catch exception
    error(message('MATLAB:xlswrite:CalculateRange', range));
end
end
%----------------------------------------------------------------------
function string = index_to_string(index, first_in_range, digits)

letters = 'A':'Z';
working_index = index - first_in_range;
outputs = cell(1,digits);
[outputs{1:digits}] = ind2sub(repmat(26,1,digits), working_index);
string = fliplr(letters([outputs{:}]));
end
%----------------------------------------------------------------------
function [digits, first_in_range] = calculate_range(num_to_convert)

digits = 1;
first_in_range = 0;
current_sum = 26;
while num_to_convert > current_sum
    digits = digits + 1;
    first_in_range = current_sum;
    current_sum = first_in_range + 26.^digits;
end
end
%------------------------------------------------------------------------------
function s = dec2base27(d)

%   DEC2BASE27(D) returns the representation of D as a string in base 27,
%   expressed as 'A'..'Z', 'AA','AB'...'AZ', and so on. Note, there is no zero
%   digit, so strictly we have hybrid base26, base27 number system.  D must be a
%   negative integer bigger than 0 and smaller than 2^52.
%
%   Examples
%       dec2base(1) returns 'A'
%       dec2base(26) returns 'Z'
%       dec2base(27) returns 'AA'
%-----------------------------------------------------------------------------

d = d(:);
if d ~= floor(d) || any(d(:) < 0) || any(d(:) > 1/eps)
    error(message('MATLAB:xlswrite:Dec2BaseInput'));
end
[num_digits, begin] = calculate_range(d);
s = index_to_string(d, begin, num_digits);
end
%------------------------------------------------------------------------------
function d = base27dec(s)
%   BASE27DEC(S) returns the decimal of string S which represents a number in
%   base 27, expressed as 'A'..'Z', 'AA','AB'...'AZ', and so on. Note, there is
%   no zero so strictly we have hybrid base26, base27 number system.
%
%   Examples
%       base27dec('A') returns 1
%       base27dec('Z') returns 26
%       base27dec('IV') returns 256
%-----------------------------------------------------------------------------

if length(s) == 1
   d = s(1) -'A' + 1;
else
    cumulative = 0;
    for i = 1:numel(s)-1
        cumulative = cumulative + 26.^i;
    end
    indexes_fliped = 1 + s - 'A';
    indexes = fliplr(indexes_fliped);
    indexes_in_cells = mat2cell(indexes, 1, ones(1,numel(indexes))); %#ok<MMTC>
    d = cumulative + sub2ind(repmat(26, 1,numel(s)), indexes_in_cells{:});
end
end
%-------------------------------------------------------------------------------

function messageStruct = exceptionHandler(nArgs, exception)
    if nArgs == 0
        throwAsCaller(exception);  	   
    else
        messageStruct.message = exception.message;       
        messageStruct.identifier = exception.identifier;
    end
end
